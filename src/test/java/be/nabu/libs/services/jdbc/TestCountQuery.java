package be.nabu.libs.services.jdbc;

import be.nabu.libs.services.jdbc.api.SQLDialect;
import junit.framework.TestCase;

public class TestCountQuery extends TestCase {
	public void testQuery1() {
		String query = "select\n"
				+ "	\n"
				+ "	n.id,\n"
				+ "	n.created,\n"
				+ "	n.modified,\n"
				+ "	n.started,\n"
				+ "	n.stopped,\n"
				+ "	n.verified,\n"
				+ "	n.parent_id,\n"
				+ "	n.name,\n"
				+ "	n.title,\n"
				+ "	n.description,\n"
				+ "	n.anonymized,\n"
				+ "	a.activity_model_id,\n"
				+ "	a.activity_type_id,\n"
				+ "	a.activity_category_ids,\n"
				+ "	a.age_selection_method_id,\n"
				+ "	a.birth_years,\n"
				+ "	a.ages,\n"
				+ "	a.min_participants,\n"
				+ "	a.max_participants,\n"
				+ "	a.sign_up_type_id,\n"
				+ "	a.sign_up_type_other_external_url,\n"
				+ "	a.sign_up_type_other_started,\n"
				+ "	a.reserve_list_type_id,\n"
				+ "	a.activity_document_ids,\n"
				+ "	a.other_activity_documents,\n"
				+ "	a.activity_inclusivity_ids,\n"
				+ "	a.other_activity_inclusivities,\n"
				+ "	a.payment_type_ids,\n"
				+ "	a.payment_timing_id,\n"
				+ "	a.communication_method_ids,\n"
				+ "	a.other_contact_info,\n"
				+ "	a.bank_account,\n"
				+ "	pi_581413713.id as parent_activity_id,\n"
				+ "	ami_6644386.name as activity_model,\n"
				+ "	pi_581413713.title as parent_title\n"
				+ "\n"
				+ "from \n"
				+ "	nodes n \n"
				+ "	join activities a on a.id = n.id\n"
				+ "	left outer join node_addresses na \n"
				+ "		on na.node_id = n.id \n"
				+ "		and na.address_type_id = (\n"
				+ "			select id \n"
				+ "			from master_data_entries \n"
				+ "			where name = 'arrival' \n"
				+ "			and master_data_category_id = (\n"
				+ "				select id from master_data_categories where name = 'addressType'\n"
				+ "			)\n"
				+ "		)\n"
				+ "	left outer join master_data_entries mde on a.activity_model_id = mde.id\n"
				+ "	left outer join nodes p on n.parent_id = p.id\n"
				+ "\n"
				+ "	 left outer join nodes pi_581413713 on pi_581413713.id = n.parent_id\n"
				+ "	 join master_data_entries ami_6644386 on ami_6644386.id = a.activity_model_id where\n"
				+ "	(? is NULL or LOWER(n.title) like '%' || LOWER(?) || '%')\n"
				+ "	and (?::uuid[] is NULL or a.activity_type_id = ANY(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or a.activity_model_id = ANY(?::uuid[]))\n"
				+ "	and (?::timestamp is NULL or n.started >= ?::timestamp)\n"
				+ "	and (?::timestamp is NULL or n.stopped <= ?::timestamp)\n"
				+ "	and (? is NULL or LOWER(\n"
				+ "		COALESCE(na.country, '') || ' ' || \n"
				+ "		COALESCE(na.city, '') || ' ' || \n"
				+ "		COALESCE(na.post_code, '') || ' ' || \n"
				+ "		COALESCE(na.street, '') || ' ' || \n"
				+ "		COALESCE(na.number, '')\n"
				+ "	) like '%' || LOWER(?) || '%')\n"
				+ "	and (? is null or p.title like '%' || LOWER(?) || '%')\n"
				+ "	and (\n"
				+ "		(n.path like '%' || ? || '%')\n"
				+ "	    or EXISTS (select 1 from establishments e where e.municipality_id = ?::UUID and n.parent_id = e.id)\n"
				+ "	)\n"
				+ "	and (?::uuid[] is NULL or n.id <> ALL(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or a.activity_type_id <> ALL(?::uuid[])) OFFSET 0 LIMIT 10";
		
		String defaultTotalCountQuery = SQLDialect.getDefaultTotalCountQuery(query);
		
		String expected = "select count(n.id) as total \n"
				+ "\n"
				+ "from \n"
				+ "	nodes n \n"
				+ "	join activities a on a.id = n.id\n"
				+ "	left outer join node_addresses na \n"
				+ "		on na.node_id = n.id \n"
				+ "		and na.address_type_id = (\n"
				+ "			select id \n"
				+ "			from master_data_entries \n"
				+ "			where name = 'arrival' \n"
				+ "			and master_data_category_id = (\n"
				+ "				select id from master_data_categories where name = 'addressType'\n"
				+ "			)\n"
				+ "		)\n"
				+ "	left outer join master_data_entries mde on a.activity_model_id = mde.id\n"
				+ "	left outer join nodes p on n.parent_id = p.id\n"
				+ "\n"
				+ "	 left outer join nodes pi_581413713 on pi_581413713.id = n.parent_id\n"
				+ "	 join master_data_entries ami_6644386 on ami_6644386.id = a.activity_model_id where\n"
				+ "	(? is NULL or LOWER(n.title) like '%' || LOWER(?) || '%')\n"
				+ "	and (?::uuid[] is NULL or a.activity_type_id = ANY(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or a.activity_model_id = ANY(?::uuid[]))\n"
				+ "	and (?::timestamp is NULL or n.started >= ?::timestamp)\n"
				+ "	and (?::timestamp is NULL or n.stopped <= ?::timestamp)\n"
				+ "	and (? is NULL or LOWER(\n"
				+ "		COALESCE(na.country, '') || ' ' || \n"
				+ "		COALESCE(na.city, '') || ' ' || \n"
				+ "		COALESCE(na.post_code, '') || ' ' || \n"
				+ "		COALESCE(na.street, '') || ' ' || \n"
				+ "		COALESCE(na.number, '')\n"
				+ "	) like '%' || LOWER(?) || '%')\n"
				+ "	and (? is null or p.title like '%' || LOWER(?) || '%')\n"
				+ "	and (\n"
				+ "		(n.path like '%' || ? || '%')\n"
				+ "	    or EXISTS (select 1 from establishments e where e.municipality_id = ?::UUID and n.parent_id = e.id)\n"
				+ "	)\n"
				+ "	and (?::uuid[] is NULL or n.id <> ALL(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or a.activity_type_id <> ALL(?::uuid[])) OFFSET 0 LIMIT 10";
		
		assertEquals(expected, defaultTotalCountQuery);
	}
	
	public void testQuery2() {
		String query = "select\n"
				+ "	\n"
				+ "	n.id,\n"
				+ "	n.created,\n"
				+ "	n.modified,\n"
				+ "	n.started,\n"
				+ "	n.stopped,\n"
				+ "	n.verified,\n"
				+ "	n.parent_id,\n"
				+ "	n.name,\n"
				+ "	n.title,\n"
				+ "	n.description,\n"
				+ "	n.anonymized,\n"
				+ "	a.activity_model_id,\n"
				+ "	a.activity_type_id,\n"
				+ "	a.activity_category_ids,\n"
				+ "	a.age_selection_method_id,\n"
				+ "	a.min_participants,\n"
				+ "	a.max_participants,\n"
				+ "	a.sign_up_type_id,\n"
				+ "	a.sign_up_type_other_external_url,\n"
				+ "	a.sign_up_type_other_started,\n"
				+ "	a.reserve_list_type_id,\n"
				+ "	a.activity_document_ids,\n"
				+ "	a.other_activity_documents,\n"
				+ "	a.activity_inclusivity_ids,\n"
				+ "	a.other_activity_inclusivities,\n"
				+ "	a.payment_type_ids,\n"
				+ "	a.payment_timing_id,\n"
				+ "	a.communication_method_ids,\n"
				+ "	a.other_contact_info,\n"
				+ "	a.bank_account,\n"
				+ "	a.min_birth_year,\n"
				+ "	a.max_birth_year,\n"
				+ "	a.min_age,\n"
				+ "	a.max_age,\n"
				+ "	f0_pi_508629851.id as parent_activity_id,\n"
				+ "	f0_ami_623697748.name as activity_model,\n"
				+ "	f0_pi_508629851.title as parent_title\n"
				+ "\n"
				+ "from \n"
				+ "	nodes n \n"
				+ "	join activities a on a.id = n.id\n"
				+ "	left outer join node_addresses na \n"
				+ "		on na.node_id = n.id \n"
				+ "		and na.address_type_id = (\n"
				+ "			select id \n"
				+ "			from master_data_entries \n"
				+ "			where name = 'arrival' \n"
				+ "			and master_data_category_id = (\n"
				+ "				select id from master_data_categories where name = 'addressType'\n"
				+ "			)\n"
				+ "		)\n"
				+ "	left outer join master_data_entries mde on a.activity_model_id = mde.id\n"
				+ "	left outer join nodes p on n.parent_id = p.id\n"
				+ "	left outer join activity_sessions sessions on sessions.activity_id = a.id\n"
				+ "\n"
				+ "	 left outer join nodes f0_pi_508629851 on f0_pi_508629851.id = n.parent_id\n"
				+ "	 join master_data_entries f0_ami_623697748 on f0_ami_623697748.id = a.activity_model_id where\n"
				+ "	(? is NULL or LOWER(n.title) like '%' || LOWER(?) || '%')\n"
				+ "	and (?::uuid[] is NULL or a.activity_type_id = ANY(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or a.activity_model_id = ANY(?::uuid[]))\n"
				+ "	and (?::timestamp is NULL or n.started >= ?::timestamp)\n"
				+ "	and (?::timestamp is NULL or n.stopped <= ?::timestamp)\n"
				+ "	and (? is NULL or LOWER(\n"
				+ "		COALESCE(na.country, '') || ' ' || \n"
				+ "		COALESCE(na.city, '') || ' ' || \n"
				+ "		COALESCE(na.post_code, '') || ' ' || \n"
				+ "		COALESCE(na.street, '') || ' ' || \n"
				+ "		COALESCE(na.number, '')\n"
				+ "	) like '%' || LOWER(?) || '%')\n"
				+ "	and (? is null or p.title like '%' || LOWER(?) || '%')\n"
				+ "	and (\n"
				+ "		(n.path like '%' || ? || '%')\n"
				+ "	    or EXISTS (select 1 from establishments e where e.municipality_id = ?::UUID and n.parent_id = e.id)\n"
				+ "	)\n"
				+ "	and (?::uuid[] is NULL or n.id <> ALL(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or n.id = ANY(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or a.activity_type_id <> ALL(?::uuid[]))\n"
				+ "	and (?::uuid[] is NULL or a.activity_model_id <> ALL(?::uuid[]))\n"
				+ "    -- 1) Date-range filtering (skip if the user didn't provide it)\n"
				+ "    and (?::timestamp is NULL or sessions.stopped >= ?::timestamp)\n"
				+ "    and (?::timestamp is NULL or sessions.started <= ?::timestamp)\n"
				+ "    -- 2) Age-range filtering (only if minAge/maxAge were provided)\n"
				+ "    and (\n"
				+ "      -- If the user did NOT provide an age range, we skip this check:\n"
				+ "      (? is NULL or ? is NULL)\n"
				+ "      -- Otherwise, require that the session does not exclude that age range:\n"
				+ "      or (\n"
				+ "         -- Session either has no age restriction\n"
				+ "         (a.minAge is NULL and a.maxAge is NULL)\n"
				+ "         -- or it overlaps the user's [minAge..maxAge]:\n"
				+ "         or (\n"
				+ "            (a.minAge is NULL or a.minAge <= ?)\n"
				+ "            and (a.maxAge is NULL or a.maxAge >= ?)\n"
				+ "         )\n"
				+ "      )\n"
				+ "    )\n"
				+ "    -- 3) Birthdate(s) filtering (only if userBirthdates array is provided)\n"
				+ "    and (\n"
				+ "      -- If the user did NOT provide an array of birthDates, we skip this check:\n"
				+ "      ? is NULL\n"
				+ "      -- Otherwise, the session must allow at least one birthDate:\n"
				+ "      or (\n"
				+ "         -- No birth-year restriction in the session\n"
				+ "         (sessions.minBirthYear is NULL and sessions.maxBirthYear is NULL)\n"
				+ "         -- or at least one date in ? is within [minBirthYear..maxBirthYear]\n"
				+ "         or EXISTS (\n"
				+ "            select 1\n"
				+ "            from   UNNEST(?) AS bd\n"
				+ "            where  YEAR(bd)\n"
				+ "                  BETWEEN COALESCE(a.minBirthYear, 0)\n"
				+ "                      and COALESCE(a.maxBirthYear, 9999)\n"
				+ "         )\n"
				+ "      )\n"
				+ "    )     ORDER BY 3 desc OFFSET 0 LIMIT 10";
		String defaultTotalCountQuery = SQLDialect.getDefaultTotalCountQuery(query);
//		System.out.println(defaultTotalCountQuery);
	}
}
